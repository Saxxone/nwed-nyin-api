generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Article {
  id         String    @id @default(cuid())
  title      String
  slug       String    @unique
  summary    String
  body       String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime? @default(now())
  created_by String?
  updated_by String?
  version    Int       @default(1)
  status     Status    @default(DRAFT)

  @@index([created_by])
  @@index([status, created_at])
}

model Section {
  id         String @id @default(cuid())
  title      String
  content    String
  article_id String

  @@index([article_id])
}

model ArticleVersion {
  id         String   @id @default(cuid())
  article_id String
  version    Int
  content    String   @db.LongText
  created_at DateTime @default(now())
  created_by String

  @@unique([article_id, version])
  @@index([article_id])
}

model ArticleMetadata {
  id         String  @id @default(cuid())
  article_id String  @unique
  keywords   String? @db.LongText
  language   String  @default("en")
  read_time  Int?
  complexity String?
}

model User {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  password        String?
  img             String
  role            Role
  active          Boolean   @default(true)
  last_login      DateTime?
  verified_at     DateTime?
  two_factor_auth Boolean   @default(false)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  @@index([email])
  @@index([role])
}

model UserPreference {
  id      String @id @default(cuid())
  user_id String @unique
  key     String
  value   String

  @@unique([user_id, key])
}

model Category {
  id         String   @id @default(cuid())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Tag {
  id   String @id @default(cuid())
  name String @unique
}

model Reference {
  id          String        @id @default(cuid())
  type        ReferenceType @default(WEBSITE)
  citation    String
  url         String?
  doi         String?
  isbn        String?
  authors     String?       @db.LongText
  publisher   String?
  year        Int?
  access_date DateTime
  article_id  String

  @@index([article_id])
}

model Word {
  id            String    @id @default(cuid())
  term          String
  pronunciation String?
  etymology     String?   @db.VarChar(255)
  alt_spelling  String?   @db.VarChar(255)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?
  language_id   String?
  dialect       String?
  accent        String?

  @@index([language_id], map: "Word_language_id_fkey")
}

model WordPronunciationAudio {
  id             String   @id @default(cuid())
  format         String?  @db.VarChar(50)
  language_id    String?
  status         Status   @default(PENDING)
  contributor_id String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  word_id        String   @unique
  file_id        String

  @@index([contributor_id], map: "WordPronunciationAudio_contributor_id_fkey")
  @@index([file_id], map: "WordPronunciationAudio_file_id_fkey")
  @@index([language_id], map: "WordPronunciationAudio_language_id_fkey")
}

model Language {
  id         String   @id @default(cuid())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Dialect {
  id          String   @id @default(cuid())
  name        String   @unique
  language_id String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@unique([name, language_id])
  @@index([language_id], map: "Dialect_language_id_fkey")
}

model WordRelation {
  id      String       @id @default(cuid())
  from_id String
  to_id   String
  type    RelationType

  @@index([from_id])
  @@index([to_id])
}

model Definition {
  id                String   @id @default(cuid())
  word_id           String
  part_of_speech_id String
  meaning           String   @db.VarChar(500)
  order             Int?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  @@index([part_of_speech_id], map: "Definition_part_of_speech_id_fkey")
  @@index([word_id], map: "Definition_word_id_fkey")
}

model PartOfSpeech {
  id   String @id @default(cuid())
  name String @unique
}

model Example {
  id            String   @id @default(cuid())
  definition_id String
  sentence      String   @db.Text
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@index([definition_id])
}

model Synonym {
  id            String @id @default(cuid())
  definition_id String
  synonym       String @db.VarChar(255)

  @@index([definition_id])
}

model Antonym {
  id            String @id @default(cuid())
  definition_id String
  antonym       String @db.VarChar(255)

  @@index([definition_id])
}

model File {
  id           String    @id @default(uuid())
  originalname String
  filename     String
  size         Int
  type         FileType
  url          String
  path         String
  mimetype     String
  caption      String?
  credit       String?
  alt_text     String?
  status       Status    @default(PENDING)
  owner_id     String
  article_id   String?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?

  @@index([article_id], map: "File_article_id_fkey")
  @@index([owner_id], map: "File_owner_id_fkey")
}

model AuthToken {
  id               String   @id @default(uuid())
  user_id          String
  token            String   @db.Text
  token_hash       String   @unique
  expires_at       DateTime
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  is_refresh_token Boolean  @default(false)

  @@unique([user_id, is_refresh_token])
}

model ArticleToCategory {
  A String
  B String

  @@unique([A, B], map: "_ArticleToCategory_AB_unique")
  @@index([B], map: "_ArticleToCategory_B_index")
  @@map("_ArticleToCategory")
}

model ArticleToTag {
  A String
  B String

  @@unique([A, B], map: "_ArticleToTag_AB_unique")
  @@index([B], map: "_ArticleToTag_B_index")
  @@map("_ArticleToTag")
}

model article_contributors {
  A String
  B String

  @@unique([A, B], map: "_article_contributors_AB_unique")
  @@index([B], map: "_article_contributors_B_index")
  @@map("_article_contributors")
}

model related_articles {
  A String
  B String

  @@unique([A, B], map: "_related_articles_AB_unique")
  @@index([B], map: "_related_articles_B_index")
  @@map("_related_articles")
}

model word_contributors {
  A String
  B String

  @@unique([A, B], map: "_word_contributors_AB_unique")
  @@index([B], map: "_word_contributors_B_index")
  @@map("_word_contributors")
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
}

enum ReferenceType {
  BOOK
  ARTICLE
  WEBSITE
  JOURNAL
  OTHER
}

enum FileType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
  PENDING
  APPROVED
  REJECTED
  UPLOADED
  DELETED
  SEEN
}

enum RelationType {
  VARIANT
  DERIVED
  COMPOUND
  ROOT
}
