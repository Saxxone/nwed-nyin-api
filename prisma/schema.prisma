// This is your Prisma schema file
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//articles 
model Article {
  id           String           @id @default(cuid())
  title        String
  slug         String           @unique
  summary      String
  body         String
  sections     Section[]
  created_at   DateTime         @default(now())
  updated_at   DateTime         @updatedAt
  deleted_at   DateTime?        @default(dbgenerated("now()"))
  contributors User[]           @relation("article_contributors")
  created_by   String?
  updated_by   String?
  version      Int              @default(1)
  categories   Category[]
  tags         Tag[]
  references   Reference[]
  related_from Article[]        @relation("related_articles")
  related_to   Article[]        @relation("related_articles")
  media        Media[]
  status       Status           @default(DRAFT)
  metadata     ArticleMetadata?
  versions     ArticleVersion[]

  @@index([created_by])
  @@index([status, created_at])
}

model Section {
  id         String  @id @default(cuid())
  title      String
  content    String
  article    Article @relation(fields: [article_id], references: [id])
  article_id String

  @@index([article_id])
}

model ArticleVersion {
  id         String   @id @default(cuid())
  article    Article  @relation(fields: [article_id], references: [id])
  article_id String
  version    Int
  content    Json
  created_at DateTime @default(now())
  created_by String

  @@unique([article_id, version])
  @@index([article_id])
}

model ArticleMetadata {
  id         String   @id @default(cuid())
  article    Article  @relation(fields: [article_id], references: [id])
  article_id String   @unique
  keywords   String[]
  language   String   @default("en")
  read_time  Int?
  complexity String?
}

model User {
  id                String           @id @default(cuid())
  name              String
  articles          Article[]        @relation("article_contributors")
  email             String           @unique
  password          String
  img               String
  role              Role
  active            Boolean          @default(true)
  last_login        DateTime?
  preferences       UserPreference[]
  verified_at       DateTime?
  two_factor_auth   Boolean          @default(false)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  contributed_words Word[]           @relation("word_contributors")

  @@index([email])
  @@index([role])
}

model UserPreference {
  id      String @id @default(cuid())
  user    User   @relation(fields: [user_id], references: [id])
  user_id String @unique
  key     String
  value   String

  @@unique([user_id, key])
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
}

model Category {
  id         String    @id @default(cuid())
  name       String    @unique
  articles   Article[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @unique
  articles Article[]
}

model Reference {
  id          String        @id @default(cuid())
  type        ReferenceType @default(WEBSITE)
  citation    String
  url         String?
  doi         String? // Digital Object Identifier
  isbn        String? // For book references
  authors     Json? // Store as JSON array
  publisher   String?
  year        Int?
  access_date DateTime
  article     Article       @relation(fields: [article_id], references: [id])
  article_id  String

  @@index([article_id])
}

enum ReferenceType {
  BOOK
  ARTICLE
  WEBSITE
  JOURNAL
  OTHER
}

model Media {
  id         String    @id @default(cuid())
  type       MediaType
  url        String
  caption    String?
  credit     String?
  alt_text   String? // For accessibility
  mime_type  String?
  size       Int? // File size in bytes
  width      Int? // Separate width and height
  height     Int? // Easier querying and validation
  article    Article   @relation(fields: [article_id], references: [id])
  article_id String

  @@index([article_id])
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

//Dictionary
model Word {
  id            String         @id @default(cuid())
  term          String         @unique
  pronunciation String?
  etymology     String?        @db.Text
  alt_spelling  String?        @db.Text
  definitions   Definition[]
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  deleted_at    DateTime?      @default(dbgenerated("now()"))
  contributors  User[]         @relation("word_contributors")
  related_from  WordRelation[] @relation("from")
  related_to    WordRelation[] @relation("to")

  @@index([term])
}

model WordRelation {
  id        String       @id @default(cuid())
  word_from Word         @relation("from", fields: [from_id], references: [id])
  from_id   String
  word_to   Word         @relation("to", fields: [to_id], references: [id])
  to_id     String
  type      RelationType

  @@index([from_id])
  @@index([to_id])
}

enum RelationType {
  VARIANT
  DERIVED
  COMPOUND
  ROOT
}

model Definition {
  id                String       @id @default(cuid())
  word              Word         @relation(fields: [word_id], references: [id])
  word_id           String
  part_of_speech    PartOfSpeech @relation(fields: [part_of_speech_id], references: [id])
  part_of_speech_id String
  meaning           String       @db.Text
  examples          Example[]
  synonyms          Synonym[]
  antonyms          Antonym[]
  order             Int?
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt

  @@unique([word_id, part_of_speech_id, meaning])
  @@index([word_id])
  @@index([part_of_speech_id])
}

model PartOfSpeech {
  id          String       @id @default(cuid())
  name        String       @unique
  definitions Definition[]
}

model Example {
  id            String     @id @default(cuid())
  definition    Definition @relation(fields: [definition_id], references: [id])
  definition_id String
  sentence      String     @db.Text
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt

  @@index([definition_id])
}

model Synonym {
  id            String     @id @default(cuid())
  definition    Definition @relation(fields: [definition_id], references: [id])
  definition_id String
  synonym       String     @db.VarChar(255)

  @@index([definition_id])
}

model Antonym {
  id            String     @id @default(cuid())
  definition    Definition @relation(fields: [definition_id], references: [id])
  definition_id String
  antonym       String     @db.VarChar(255)

  @@index([definition_id])
}
